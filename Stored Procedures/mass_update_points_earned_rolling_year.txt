DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mass_update_points_earned`(IN date_to_begin DATE, IN date_to_end DATE)
BEGIN
#get all users who have a yearly status and their multiplier
Create temporary table yearly(
#get player VIP_Status From This Year
select yearly_vip_status.*, multiplier
from 
(select yearly_vip_calculation.*,
case 
	when (year_vip_points between 100000 and 149999) then 'Diamond_I'
    when (year_vip_points between 150000 and 249999) then 'Diamond_II'
    when (year_vip_points between 250000 and 499999) then 'Diamond_III'
    when (year_vip_points between 500000 and 999999) then 'Diamond_IV'
    when (year_vip_points between 1000000 and 2499999) then 'Diamond_V'
    when (year_vip_points between 2500000 and 5000000) then 'Black_Diamond'
    else NULL
    end as 'yearly_VIP_Status'
from
(select player_id
,sum(fee_total*15) as year_vip_points
,year(date_played) as year_played
from vip_daily_uploads
where month(date_played) between month(current_date) and month(current_date - interval 12 month)
group by player_id, year_played) as yearly_vip_calculation) as yearly_vip_status
,vip_definitions
where vip_definitions.name = yearly_vip_status.yearly_VIP_status);

#insert into club_points transactions points for yearly players where date >= parameter date
INSERT INTO club_points_transactions(date_played, total_points, player_id) 
		SELECT date_played, points_earned, player_id 
			FROM (select vdu.player_id as player_id, 
				sum(vdu.fee_total * 15 * yearly.multiplier) as points_earned,
				vdu.date_played as date_played
				from vip_daily_uploads vdu,
				yearly
				where date(vdu.date_played) BETWEEN date_to_begin and date_to_end
				and vdu.player_id = yearly.player_id
				group by vdu.player_id, vdu.date_played) as points_earned_today;

#get all users who have a status from last month and their multiplier
create temporary table last_month(select player_id, 
fees, 
vip_points, 
month_created, 
VIP_status, 
multiplier
from 
(select player_id
,fees
,vip_points
,month_created
, CASE
	WHEN vip_points < 250.0 THEN 'Unranked'
    WHEN vip_points < 2001.0 THEN 'Bronze'
	WHEN vip_points < 3001.0 THEN 'Copper'
	WHEN vip_points < 5000.0 THEN 'Silver'
	WHEN vip_points < 14999.0 THEN 'Gold'
    WHEN vip_points > 14999.0 THEN 'Platinum'
	ELSE 'Unranked'
END as 'VIP_status'
from
(select player_id
,sum(fee_total) as fees
,sum(fee_total*15) as vip_points
,monthname(date_played) as month_created
from vip_daily_uploads
where month(date_played) = month(current_date - INTERVAL 1 MONTH)
group by player_id, monthname(date_played)) as last_month_points) as last_month_VIP_status
,vip_definitions
where vip_definitions.name = last_month_VIP_status.VIP_status);

#get all transactions from daily_uploads who need to be multiplied by last month factor 
create temporary table last_month_transactions(select * from 
vip_daily_uploads
where not exists (Select * from yearly where vip_daily_uploads.player_id = yearly.player_id)
and exists (Select * from last_month where vip_daily_uploads.player_id = last_month.player_id));  


#insert into club_points transactions points for last month players where date >= parameter date
INSERT INTO club_points_transactions(date_played, total_points, player_id) 
		SELECT date_played, points_earned, player_id 
			FROM (select lmt.player_id as player_id, 
				sum(lmt.fee_total * 15 * last_month.multiplier) as points_earned,
				lmt.date_played as date_played
				from last_month_transactions lmt,
				last_month
				where date(lmt.date_played) BETWEEN date_to_begin and date_to_end
				and lmt.player_id = last_month.player_id
				group by lmt.player_id, lmt.date_played) as points_earned_today;

#get all transactions from daily_uploads who need to be multiplied by 1 
create temporary table one_multiplier_transactions(select * from 
vip_daily_uploads
where not exists (Select * from yearly where vip_daily_uploads.player_id = yearly.player_id)
and not exists (Select * from last_month where vip_daily_uploads.player_id = last_month.player_id)); 

#insert into club_points transactions points for players who didn't play last month where date >= parameter date
INSERT INTO club_points_transactions(date_played, total_points, player_id) 
		SELECT date_played, points_earned, player_id 
			FROM (select omt.player_id as player_id, 
				sum(omt.fee_total * 15 * 1) as points_earned,
				omt.date_played as date_played
				from one_multiplier_transactions omt
				where date(omt.date_played) BETWEEN date_to_begin and date_to_end
				group by omt.player_id, omt.date_played) as points_earned_today;

drop temporary table yearly;
drop temporary table last_month;
drop temporary table last_month_transactions;
drop temporary table one_multiplier_transactions;
END$$
DELIMITER ;
